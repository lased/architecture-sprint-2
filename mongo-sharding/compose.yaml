name: mongo-sharding

x-common:
  mongo: &mongoShared
    image: mongo:latest
    restart: always
    healthcheck:
      interval: 5s
      start_period: 10s

services:
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: 'mongodb://mongos_router:27018'
      MONGODB_DATABASE_NAME: 'somedb'

  # Конфигурационный сервер
  config_server:
    <<: *mongoShared
    container_name: config_server
    ports:
      - '27017:27017'
    volumes:
      - config-data:/data/db
    command:
      [
        'mongod',
        '--configsvr',
        '--replSet',
        'config_server',
        '--bind_ip_all',
        '--port',
        '27017',
      ]
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--eval',
          "db.adminCommand('ping')",
          '--port',
          '27017',
        ]

  # Роутер
  mongos_router:
    <<: *mongoShared
    container_name: mongos_router
    ports:
      - '27018:27018'
    volumes:
      - router-data:/data/db
    command:
      [
        'mongos',
        '--configdb',
        'config_server/config_server:27017',
        '--bind_ip_all',
        '--port',
        '27018',
      ]
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--eval',
          "db.adminCommand('ping')",
          '--port',
          '27018',
        ]

  # Shard 1
  shard1:
    <<: *mongoShared
    container_name: shard1
    volumes:
      - shard1-data:/data/db
    command:
      [
        'mongod',
        '--shardsvr',
        '--replSet',
        'shard1',
        '--bind_ip_all',
        '--port',
        '27019',
      ]
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--eval',
          "db.adminCommand('ping')",
          '--port',
          '27019',
        ]

  # Shard 2
  shard2:
    <<: *mongoShared
    container_name: shard2
    volumes:
      - shard2-data:/data/db
    command:
      [
        'mongod',
        '--shardsvr',
        '--replSet',
        'shard2',
        '--bind_ip_all',
        '--port',
        '27020',
      ]
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--eval',
          "db.adminCommand('ping')",
          '--port',
          '27020',
        ]

volumes:
  config-data:
  router-data:
  shard1-data:
  shard2-data:
